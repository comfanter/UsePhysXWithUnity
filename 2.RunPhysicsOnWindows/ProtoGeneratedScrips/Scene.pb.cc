// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Scene.proto

#include "Scene.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace killer {
namespace proto {
class Vector2DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector2>
      _instance;
} _Vector2_default_instance_;
class Vector3DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector3>
      _instance;
} _Vector3_default_instance_;
class Vector4DefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Vector4>
      _instance;
} _Vector4_default_instance_;
class U3DPhysxSceneDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxScene>
      _instance;
} _U3DPhysxScene_default_instance_;
class U3DPhysxSphereDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxSphere>
      _instance;
} _U3DPhysxSphere_default_instance_;
class U3DPhysxBoxDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxBox>
      _instance;
} _U3DPhysxBox_default_instance_;
class U3DPhysxCapsuleDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxCapsule>
      _instance;
} _U3DPhysxCapsule_default_instance_;
class U3DPhysxMeshDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<U3DPhysxMesh>
      _instance;
} _U3DPhysxMesh_default_instance_;
}  // namespace proto
}  // namespace killer
namespace protobuf_Scene_2eproto {
void InitDefaultsVector2Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::killer::proto::_Vector2_default_instance_;
    new (ptr) ::killer::proto::Vector2();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::Vector2::InitAsDefaultInstance();
}

void InitDefaultsVector2() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector2Impl);
}

void InitDefaultsVector3Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::killer::proto::_Vector3_default_instance_;
    new (ptr) ::killer::proto::Vector3();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::Vector3::InitAsDefaultInstance();
}

void InitDefaultsVector3() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector3Impl);
}

void InitDefaultsVector4Impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::killer::proto::_Vector4_default_instance_;
    new (ptr) ::killer::proto::Vector4();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::Vector4::InitAsDefaultInstance();
}

void InitDefaultsVector4() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsVector4Impl);
}

void InitDefaultsU3DPhysxSceneImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Scene_2eproto::InitDefaultsU3DPhysxBox();
  protobuf_Scene_2eproto::InitDefaultsU3DPhysxSphere();
  protobuf_Scene_2eproto::InitDefaultsU3DPhysxCapsule();
  protobuf_Scene_2eproto::InitDefaultsU3DPhysxMesh();
  {
    void* ptr = &::killer::proto::_U3DPhysxScene_default_instance_;
    new (ptr) ::killer::proto::U3DPhysxScene();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::U3DPhysxScene::InitAsDefaultInstance();
}

void InitDefaultsU3DPhysxScene() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsU3DPhysxSceneImpl);
}

void InitDefaultsU3DPhysxSphereImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Scene_2eproto::InitDefaultsVector3();
  protobuf_Scene_2eproto::InitDefaultsVector4();
  {
    void* ptr = &::killer::proto::_U3DPhysxSphere_default_instance_;
    new (ptr) ::killer::proto::U3DPhysxSphere();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::U3DPhysxSphere::InitAsDefaultInstance();
}

void InitDefaultsU3DPhysxSphere() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsU3DPhysxSphereImpl);
}

void InitDefaultsU3DPhysxBoxImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Scene_2eproto::InitDefaultsVector3();
  protobuf_Scene_2eproto::InitDefaultsVector4();
  {
    void* ptr = &::killer::proto::_U3DPhysxBox_default_instance_;
    new (ptr) ::killer::proto::U3DPhysxBox();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::U3DPhysxBox::InitAsDefaultInstance();
}

void InitDefaultsU3DPhysxBox() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsU3DPhysxBoxImpl);
}

void InitDefaultsU3DPhysxCapsuleImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Scene_2eproto::InitDefaultsVector3();
  protobuf_Scene_2eproto::InitDefaultsVector4();
  {
    void* ptr = &::killer::proto::_U3DPhysxCapsule_default_instance_;
    new (ptr) ::killer::proto::U3DPhysxCapsule();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::U3DPhysxCapsule::InitAsDefaultInstance();
}

void InitDefaultsU3DPhysxCapsule() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsU3DPhysxCapsuleImpl);
}

void InitDefaultsU3DPhysxMeshImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_Scene_2eproto::InitDefaultsVector3();
  protobuf_Scene_2eproto::InitDefaultsVector4();
  protobuf_Scene_2eproto::InitDefaultsVector2();
  {
    void* ptr = &::killer::proto::_U3DPhysxMesh_default_instance_;
    new (ptr) ::killer::proto::U3DPhysxMesh();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::killer::proto::U3DPhysxMesh::InitAsDefaultInstance();
}

void InitDefaultsU3DPhysxMesh() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsU3DPhysxMeshImpl);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector2, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector2, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector2, y_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector3, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector3, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector3, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector3, z_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, z_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::Vector4, w_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, scene_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, box_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, sphere_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, capsule_collider_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxScene, mesh_collider_),
  1,
  0,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, radius_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxSphere, rotation_),
  3,
  4,
  0,
  2,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, x_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, y_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, z_extents_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxBox, rotation_),
  5,
  6,
  0,
  2,
  3,
  4,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, raduis_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, height_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxCapsule, rotation_),
  4,
  5,
  0,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, vertex_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, vertices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, rotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, pos_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, scale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, indices_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, indices_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, fixrotation_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, uvs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::killer::proto::U3DPhysxMesh, triangles_),
  3,
  7,
  4,
  ~0u,
  0,
  1,
  2,
  5,
  ~0u,
  6,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::killer::proto::Vector2)},
  { 9, 17, sizeof(::killer::proto::Vector3)},
  { 20, 29, sizeof(::killer::proto::Vector4)},
  { 33, 44, sizeof(::killer::proto::U3DPhysxScene)},
  { 50, 60, sizeof(::killer::proto::U3DPhysxSphere)},
  { 65, 77, sizeof(::killer::proto::U3DPhysxBox)},
  { 84, 95, sizeof(::killer::proto::U3DPhysxCapsule)},
  { 101, 118, sizeof(::killer::proto::U3DPhysxMesh)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_Vector2_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_Vector3_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_Vector4_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_U3DPhysxScene_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_U3DPhysxSphere_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_U3DPhysxBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_U3DPhysxCapsule_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::killer::proto::_U3DPhysxMesh_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Scene.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013Scene.proto\022\014killer.proto\"%\n\007Vector2\022\014"
      "\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\"3\n\007Vector3\022\014\n"
      "\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014\n\001z\030\003 \001(\001:\0010\""
      "A\n\007Vector4\022\014\n\001x\030\001 \001(\001:\0010\022\014\n\001y\030\002 \001(\001:\0010\022\014"
      "\n\001z\030\003 \001(\001:\0010\022\014\n\001w\030\004 \001(\001:\0010\"\203\002\n\rU3DPhysxS"
      "cene\022\n\n\002id\030\001 \001(\005\022\022\n\nscene_name\030\002 \001(\t\022/\n\014"
      "box_collider\030\003 \003(\0132\031.killer.proto.U3DPhy"
      "sxBox\0225\n\017sphere_collider\030\004 \003(\0132\034.killer."
      "proto.U3DPhysxSphere\0227\n\020capsule_collider"
      "\030\005 \003(\0132\035.killer.proto.U3DPhysxCapsule\0221\n"
      "\rmesh_collider\030\006 \003(\0132\032.killer.proto.U3DP"
      "hysxMesh\"\243\001\n\016U3DPhysxSphere\022\n\n\002id\030\001 \001(\005\022"
      "(\n\004type\030\002 \001(\0162\032.killer.proto.ColliderTyp"
      "e\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector3\022\016\n"
      "\006radius\030\004 \001(\001\022\'\n\010rotation\030\005 \001(\0132\025.killer"
      ".proto.Vector4\"\311\001\n\013U3DPhysxBox\022\n\n\002id\030\001 \001"
      "(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto.Collider"
      "Type\022\"\n\003pos\030\003 \001(\0132\025.killer.proto.Vector3"
      "\022\021\n\tx_extents\030\004 \001(\001\022\021\n\ty_extents\030\005 \001(\001\022\021"
      "\n\tz_extents\030\006 \001(\001\022\'\n\010rotation\030\007 \001(\0132\025.ki"
      "ller.proto.Vector4\"\264\001\n\017U3DPhysxCapsule\022\n"
      "\n\002id\030\001 \001(\005\022(\n\004type\030\002 \001(\0162\032.killer.proto."
      "ColliderType\022\"\n\003pos\030\003 \001(\0132\025.killer.proto"
      ".Vector3\022\016\n\006raduis\030\004 \001(\001\022\016\n\006height\030\005 \001(\001"
      "\022\'\n\010rotation\030\006 \001(\0132\025.killer.proto.Vector"
      "4\"\352\002\n\014U3DPhysxMesh\022\n\n\002id\030\001 \001(\005\022(\n\004type\030\002"
      " \001(\0162\032.killer.proto.ColliderType\022\024\n\014vert"
      "ex_count\030\003 \001(\005\022\'\n\010vertices\030\004 \003(\0132\025.kille"
      "r.proto.Vector3\022\'\n\010rotation\030\005 \001(\0132\025.kill"
      "er.proto.Vector4\022\"\n\003pos\030\006 \001(\0132\025.killer.p"
      "roto.Vector3\022$\n\005scale\030\007 \001(\0132\025.killer.pro"
      "to.Vector3\022\025\n\rindices_count\030\010 \001(\005\022\017\n\007ind"
      "ices\030\t \003(\005\022\023\n\013fixRotation\030\n \001(\010\022\"\n\003uvs\030\013"
      " \003(\0132\025.killer.proto.Vector2\022\021\n\ttriangles"
      "\030\014 \003(\005*:\n\014ColliderType\022\007\n\003BOX\020\001\022\n\n\006SPHER"
      "E\020\002\022\013\n\007CAPSULE\020\003\022\010\n\004MESH\020\004"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1426);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Scene.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Scene_2eproto
namespace killer {
namespace proto {
const ::google::protobuf::EnumDescriptor* ColliderType_descriptor() {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_Scene_2eproto::file_level_enum_descriptors[0];
}
bool ColliderType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Vector2::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector2::kXFieldNumber;
const int Vector2::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector2::Vector2()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsVector2();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector2)
}

void Vector2::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector2)
  SharedDtor();
}

void Vector2::SharedDtor() {
}

void Vector2::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector2::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector2& Vector2::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsVector2();
  return *internal_default_instance();
}

Vector2* Vector2::New(::google::protobuf::Arena* arena) const {
  Vector2* n = new Vector2;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector2::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector2)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector2)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector2)
  return false;
#undef DO_
}

void Vector2::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector2)
}

::google::protobuf::uint8* Vector2::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector2)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector2)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector2::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector2>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector2)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector2::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::Swap(Vector2* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector2::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector3::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector3::kXFieldNumber;
const int Vector3::kYFieldNumber;
const int Vector3::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector3::Vector3()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsVector3();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector3)
}

void Vector3::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector3)
  SharedDtor();
}

void Vector3::SharedDtor() {
}

void Vector3::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector3& Vector3::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsVector3();
  return *internal_default_instance();
}

Vector3* Vector3::New(::google::protobuf::Arena* arena) const {
  Vector3* n = new Vector3;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&z_) -
        reinterpret_cast<char*>(&x_)) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector3::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector3)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector3)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector3)
  return false;
#undef DO_
}

void Vector3::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector3)
}

::google::protobuf::uint8* Vector3::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector3)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector3)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector3>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector3)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector3::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::Swap(Vector3* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector3::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Vector4::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector4::kXFieldNumber;
const int Vector4::kYFieldNumber;
const int Vector4::kZFieldNumber;
const int Vector4::kWFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector4::Vector4()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsVector4();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.Vector4)
}
Vector4::Vector4(const Vector4& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&w_) -
    reinterpret_cast<char*>(&x_)) + sizeof(w_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.Vector4)
}

void Vector4::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&w_) -
      reinterpret_cast<char*>(&x_)) + sizeof(w_));
}

Vector4::~Vector4() {
  // @@protoc_insertion_point(destructor:killer.proto.Vector4)
  SharedDtor();
}

void Vector4::SharedDtor() {
}

void Vector4::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector4::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Vector4& Vector4::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsVector4();
  return *internal_default_instance();
}

Vector4* Vector4::New(::google::protobuf::Arena* arena) const {
  Vector4* n = new Vector4;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector4::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.Vector4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 15u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&w_) -
        reinterpret_cast<char*>(&x_)) + sizeof(w_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vector4::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.Vector4)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = 0];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u /* 9 & 0xFF */)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u /* 17 & 0xFF */)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u /* 25 & 0xFF */)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double w = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_w();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &w_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.Vector4)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.Vector4)
  return false;
#undef DO_
}

void Vector4::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.Vector4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  // optional double w = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->w(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.Vector4)
}

::google::protobuf::uint8* Vector4::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.Vector4)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->x(), target);
  }

  // optional double y = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->y(), target);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->z(), target);
  }

  // optional double w = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->w(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.Vector4)
  return target;
}

size_t Vector4::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.Vector4)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional double x = 1 [default = 0];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = 0];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double w = 4 [default = 0];
    if (has_w()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector4::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector4* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector4>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.Vector4)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.Vector4)
    MergeFrom(*source);
  }
}

void Vector4::MergeFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.Vector4)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000008u) {
      w_ = from.w_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vector4::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector4::CopyFrom(const Vector4& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.Vector4)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector4::IsInitialized() const {
  return true;
}

void Vector4::Swap(Vector4* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector4::InternalSwap(Vector4* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(z_, other->z_);
  swap(w_, other->w_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector4::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void U3DPhysxScene::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxScene::kIdFieldNumber;
const int U3DPhysxScene::kSceneNameFieldNumber;
const int U3DPhysxScene::kBoxColliderFieldNumber;
const int U3DPhysxScene::kSphereColliderFieldNumber;
const int U3DPhysxScene::kCapsuleColliderFieldNumber;
const int U3DPhysxScene::kMeshColliderFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxScene::U3DPhysxScene()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxScene();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxScene)
}
U3DPhysxScene::U3DPhysxScene(const U3DPhysxScene& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      box_collider_(from.box_collider_),
      sphere_collider_(from.sphere_collider_),
      capsule_collider_(from.capsule_collider_),
      mesh_collider_(from.mesh_collider_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_scene_name()) {
    scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxScene)
}

void U3DPhysxScene::SharedCtor() {
  _cached_size_ = 0;
  scene_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0;
}

U3DPhysxScene::~U3DPhysxScene() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxScene)
  SharedDtor();
}

void U3DPhysxScene::SharedDtor() {
  scene_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void U3DPhysxScene::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxScene::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const U3DPhysxScene& U3DPhysxScene::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxScene();
  return *internal_default_instance();
}

U3DPhysxScene* U3DPhysxScene::New(::google::protobuf::Arena* arena) const {
  U3DPhysxScene* n = new U3DPhysxScene;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxScene::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  box_collider_.Clear();
  sphere_collider_.Clear();
  capsule_collider_.Clear();
  mesh_collider_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!scene_name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*scene_name_.UnsafeRawStringPointer())->clear();
  }
  id_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxScene::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxScene)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string scene_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_scene_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->scene_name().data(), static_cast<int>(this->scene_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "killer.proto.U3DPhysxScene.scene_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.U3DPhysxBox box_collider = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_box_collider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_sphere_collider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_capsule_collider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_mesh_collider()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxScene)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxScene)
  return false;
#undef DO_
}

void U3DPhysxScene::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional string scene_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), static_cast<int>(this->scene_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->scene_name(), output);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_collider_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->box_collider(static_cast<int>(i)), output);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sphere_collider_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sphere_collider(static_cast<int>(i)), output);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->capsule_collider_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->capsule_collider(static_cast<int>(i)), output);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mesh_collider_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mesh_collider(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxScene)
}

::google::protobuf::uint8* U3DPhysxScene::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxScene)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional string scene_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->scene_name().data(), static_cast<int>(this->scene_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "killer.proto.U3DPhysxScene.scene_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->scene_name(), target);
  }

  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->box_collider_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->box_collider(static_cast<int>(i)), deterministic, target);
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sphere_collider_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->sphere_collider(static_cast<int>(i)), deterministic, target);
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->capsule_collider_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->capsule_collider(static_cast<int>(i)), deterministic, target);
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->mesh_collider_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->mesh_collider(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxScene)
  return target;
}

size_t U3DPhysxScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxScene)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .killer.proto.U3DPhysxBox box_collider = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->box_collider_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->box_collider(static_cast<int>(i)));
    }
  }

  // repeated .killer.proto.U3DPhysxSphere sphere_collider = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->sphere_collider_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sphere_collider(static_cast<int>(i)));
    }
  }

  // repeated .killer.proto.U3DPhysxCapsule capsule_collider = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->capsule_collider_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->capsule_collider(static_cast<int>(i)));
    }
  }

  // repeated .killer.proto.U3DPhysxMesh mesh_collider = 6;
  {
    unsigned int count = static_cast<unsigned int>(this->mesh_collider_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->mesh_collider(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string scene_name = 2;
    if (has_scene_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->scene_name());
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxScene::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxScene)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxScene* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxScene>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxScene)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxScene)
    MergeFrom(*source);
  }
}

void U3DPhysxScene::MergeFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  box_collider_.MergeFrom(from.box_collider_);
  sphere_collider_.MergeFrom(from.sphere_collider_);
  capsule_collider_.MergeFrom(from.capsule_collider_);
  mesh_collider_.MergeFrom(from.mesh_collider_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_scene_name();
      scene_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.scene_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void U3DPhysxScene::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxScene::CopyFrom(const U3DPhysxScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxScene::IsInitialized() const {
  return true;
}

void U3DPhysxScene::Swap(U3DPhysxScene* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxScene::InternalSwap(U3DPhysxScene* other) {
  using std::swap;
  box_collider_.InternalSwap(&other->box_collider_);
  sphere_collider_.InternalSwap(&other->sphere_collider_);
  capsule_collider_.InternalSwap(&other->capsule_collider_);
  mesh_collider_.InternalSwap(&other->mesh_collider_);
  scene_name_.Swap(&other->scene_name_);
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxScene::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void U3DPhysxSphere::InitAsDefaultInstance() {
  ::killer::proto::_U3DPhysxSphere_default_instance_._instance.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  ::killer::proto::_U3DPhysxSphere_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxSphere::kIdFieldNumber;
const int U3DPhysxSphere::kTypeFieldNumber;
const int U3DPhysxSphere::kPosFieldNumber;
const int U3DPhysxSphere::kRadiusFieldNumber;
const int U3DPhysxSphere::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxSphere::U3DPhysxSphere()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxSphere();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxSphere)
}
U3DPhysxSphere::U3DPhysxSphere(const U3DPhysxSphere& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&radius_, &from.radius_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&radius_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxSphere)
}

void U3DPhysxSphere::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(id_));
  type_ = 1;
}

U3DPhysxSphere::~U3DPhysxSphere() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxSphere)
  SharedDtor();
}

void U3DPhysxSphere::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rotation_;
}

void U3DPhysxSphere::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxSphere::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const U3DPhysxSphere& U3DPhysxSphere::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxSphere();
  return *internal_default_instance();
}

U3DPhysxSphere* U3DPhysxSphere::New(::google::protobuf::Arena* arena) const {
  U3DPhysxSphere* n = new U3DPhysxSphere;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxSphere::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxSphere::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxSphere)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxSphere)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxSphere)
  return false;
#undef DO_
}

void U3DPhysxSphere::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double radius = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->radius(), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxSphere)
}

::google::protobuf::uint8* U3DPhysxSphere::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxSphere)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pos_, deterministic, target);
  }

  // optional double radius = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->radius(), target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxSphere)
  return target;
}

size_t U3DPhysxSphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxSphere)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rotation_);
    }

    // optional double radius = 4;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxSphere::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxSphere)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxSphere* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxSphere>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxSphere)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxSphere)
    MergeFrom(*source);
  }
}

void U3DPhysxSphere::MergeFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxSphere)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void U3DPhysxSphere::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxSphere::CopyFrom(const U3DPhysxSphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxSphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxSphere::IsInitialized() const {
  return true;
}

void U3DPhysxSphere::Swap(U3DPhysxSphere* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxSphere::InternalSwap(U3DPhysxSphere* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(rotation_, other->rotation_);
  swap(radius_, other->radius_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxSphere::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void U3DPhysxBox::InitAsDefaultInstance() {
  ::killer::proto::_U3DPhysxBox_default_instance_._instance.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  ::killer::proto::_U3DPhysxBox_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxBox::kIdFieldNumber;
const int U3DPhysxBox::kTypeFieldNumber;
const int U3DPhysxBox::kPosFieldNumber;
const int U3DPhysxBox::kXExtentsFieldNumber;
const int U3DPhysxBox::kYExtentsFieldNumber;
const int U3DPhysxBox::kZExtentsFieldNumber;
const int U3DPhysxBox::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxBox::U3DPhysxBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxBox();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxBox)
}
U3DPhysxBox::U3DPhysxBox(const U3DPhysxBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&x_extents_, &from.x_extents_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&x_extents_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxBox)
}

void U3DPhysxBox::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(id_));
  type_ = 1;
}

U3DPhysxBox::~U3DPhysxBox() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxBox)
  SharedDtor();
}

void U3DPhysxBox::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rotation_;
}

void U3DPhysxBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxBox::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const U3DPhysxBox& U3DPhysxBox::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxBox();
  return *internal_default_instance();
}

U3DPhysxBox* U3DPhysxBox::New(::google::protobuf::Arena* arena) const {
  U3DPhysxBox* n = new U3DPhysxBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxBox::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  if (cached_has_bits & 124u) {
    ::memset(&x_extents_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&x_extents_)) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double x_extents = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_x_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y_extents = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_y_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z_extents = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u /* 49 & 0xFF */)) {
          set_has_z_extents();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_extents_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxBox)
  return false;
#undef DO_
}

void U3DPhysxBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double x_extents = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->x_extents(), output);
  }

  // optional double y_extents = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->y_extents(), output);
  }

  // optional double z_extents = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->z_extents(), output);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxBox)
}

::google::protobuf::uint8* U3DPhysxBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxBox)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pos_, deterministic, target);
  }

  // optional double x_extents = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->x_extents(), target);
  }

  // optional double y_extents = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->y_extents(), target);
  }

  // optional double z_extents = 6;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->z_extents(), target);
  }

  // optional .killer.proto.Vector4 rotation = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxBox)
  return target;
}

size_t U3DPhysxBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxBox)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 127u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 7;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rotation_);
    }

    // optional double x_extents = 4;
    if (has_x_extents()) {
      total_size += 1 + 8;
    }

    // optional double y_extents = 5;
    if (has_y_extents()) {
      total_size += 1 + 8;
    }

    // optional double z_extents = 6;
    if (has_z_extents()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxBox)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxBox)
    MergeFrom(*source);
  }
}

void U3DPhysxBox::MergeFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      x_extents_ = from.x_extents_;
    }
    if (cached_has_bits & 0x00000008u) {
      y_extents_ = from.y_extents_;
    }
    if (cached_has_bits & 0x00000010u) {
      z_extents_ = from.z_extents_;
    }
    if (cached_has_bits & 0x00000020u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000040u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void U3DPhysxBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxBox::CopyFrom(const U3DPhysxBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxBox::IsInitialized() const {
  return true;
}

void U3DPhysxBox::Swap(U3DPhysxBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxBox::InternalSwap(U3DPhysxBox* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(rotation_, other->rotation_);
  swap(x_extents_, other->x_extents_);
  swap(y_extents_, other->y_extents_);
  swap(z_extents_, other->z_extents_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxBox::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void U3DPhysxCapsule::InitAsDefaultInstance() {
  ::killer::proto::_U3DPhysxCapsule_default_instance_._instance.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  ::killer::proto::_U3DPhysxCapsule_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxCapsule::kIdFieldNumber;
const int U3DPhysxCapsule::kTypeFieldNumber;
const int U3DPhysxCapsule::kPosFieldNumber;
const int U3DPhysxCapsule::kRaduisFieldNumber;
const int U3DPhysxCapsule::kHeightFieldNumber;
const int U3DPhysxCapsule::kRotationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxCapsule::U3DPhysxCapsule()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxCapsule();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxCapsule)
}
U3DPhysxCapsule::U3DPhysxCapsule(const U3DPhysxCapsule& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  ::memcpy(&raduis_, &from.raduis_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&raduis_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxCapsule)
}

void U3DPhysxCapsule::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&pos_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&id_) -
      reinterpret_cast<char*>(&pos_)) + sizeof(id_));
  type_ = 1;
}

U3DPhysxCapsule::~U3DPhysxCapsule() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxCapsule)
  SharedDtor();
}

void U3DPhysxCapsule::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete rotation_;
}

void U3DPhysxCapsule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxCapsule::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const U3DPhysxCapsule& U3DPhysxCapsule::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxCapsule();
  return *internal_default_instance();
}

U3DPhysxCapsule* U3DPhysxCapsule::New(::google::protobuf::Arena* arena) const {
  U3DPhysxCapsule* n = new U3DPhysxCapsule;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxCapsule::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxCapsule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
  }
  if (cached_has_bits & 60u) {
    ::memset(&raduis_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&id_) -
        reinterpret_cast<char*>(&raduis_)) + sizeof(id_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxCapsule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxCapsule)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double raduis = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u /* 33 & 0xFF */)) {
          set_has_raduis();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &raduis_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u /* 41 & 0xFF */)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxCapsule)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxCapsule)
  return false;
#undef DO_
}

void U3DPhysxCapsule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxCapsule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->pos_, output);
  }

  // optional double raduis = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->raduis(), output);
  }

  // optional double height = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->height(), output);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->rotation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxCapsule)
}

::google::protobuf::uint8* U3DPhysxCapsule::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxCapsule)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .killer.proto.Vector3 pos = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, *this->pos_, deterministic, target);
  }

  // optional double raduis = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->raduis(), target);
  }

  // optional double height = 5;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->height(), target);
  }

  // optional .killer.proto.Vector4 rotation = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->rotation_, deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxCapsule)
  return target;
}

size_t U3DPhysxCapsule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxCapsule)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 63u) {
    // optional .killer.proto.Vector3 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pos_);
    }

    // optional .killer.proto.Vector4 rotation = 6;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rotation_);
    }

    // optional double raduis = 4;
    if (has_raduis()) {
      total_size += 1 + 8;
    }

    // optional double height = 5;
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxCapsule::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxCapsule* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxCapsule>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxCapsule)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxCapsule)
    MergeFrom(*source);
  }
}

void U3DPhysxCapsule::MergeFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxCapsule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000004u) {
      raduis_ = from.raduis_;
    }
    if (cached_has_bits & 0x00000008u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void U3DPhysxCapsule::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxCapsule::CopyFrom(const U3DPhysxCapsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxCapsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxCapsule::IsInitialized() const {
  return true;
}

void U3DPhysxCapsule::Swap(U3DPhysxCapsule* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxCapsule::InternalSwap(U3DPhysxCapsule* other) {
  using std::swap;
  swap(pos_, other->pos_);
  swap(rotation_, other->rotation_);
  swap(raduis_, other->raduis_);
  swap(height_, other->height_);
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxCapsule::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void U3DPhysxMesh::InitAsDefaultInstance() {
  ::killer::proto::_U3DPhysxMesh_default_instance_._instance.get_mutable()->rotation_ = const_cast< ::killer::proto::Vector4*>(
      ::killer::proto::Vector4::internal_default_instance());
  ::killer::proto::_U3DPhysxMesh_default_instance_._instance.get_mutable()->pos_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
  ::killer::proto::_U3DPhysxMesh_default_instance_._instance.get_mutable()->scale_ = const_cast< ::killer::proto::Vector3*>(
      ::killer::proto::Vector3::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int U3DPhysxMesh::kIdFieldNumber;
const int U3DPhysxMesh::kTypeFieldNumber;
const int U3DPhysxMesh::kVertexCountFieldNumber;
const int U3DPhysxMesh::kVerticesFieldNumber;
const int U3DPhysxMesh::kRotationFieldNumber;
const int U3DPhysxMesh::kPosFieldNumber;
const int U3DPhysxMesh::kScaleFieldNumber;
const int U3DPhysxMesh::kIndicesCountFieldNumber;
const int U3DPhysxMesh::kIndicesFieldNumber;
const int U3DPhysxMesh::kFixRotationFieldNumber;
const int U3DPhysxMesh::kUvsFieldNumber;
const int U3DPhysxMesh::kTrianglesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

U3DPhysxMesh::U3DPhysxMesh()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxMesh();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:killer.proto.U3DPhysxMesh)
}
U3DPhysxMesh::U3DPhysxMesh(const U3DPhysxMesh& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      vertices_(from.vertices_),
      indices_(from.indices_),
      uvs_(from.uvs_),
      triangles_(from.triangles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_rotation()) {
    rotation_ = new ::killer::proto::Vector4(*from.rotation_);
  } else {
    rotation_ = NULL;
  }
  if (from.has_pos()) {
    pos_ = new ::killer::proto::Vector3(*from.pos_);
  } else {
    pos_ = NULL;
  }
  if (from.has_scale()) {
    scale_ = new ::killer::proto::Vector3(*from.scale_);
  } else {
    scale_ = NULL;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:killer.proto.U3DPhysxMesh)
}

void U3DPhysxMesh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&rotation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixrotation_) -
      reinterpret_cast<char*>(&rotation_)) + sizeof(fixrotation_));
  type_ = 1;
}

U3DPhysxMesh::~U3DPhysxMesh() {
  // @@protoc_insertion_point(destructor:killer.proto.U3DPhysxMesh)
  SharedDtor();
}

void U3DPhysxMesh::SharedDtor() {
  if (this != internal_default_instance()) delete rotation_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete scale_;
}

void U3DPhysxMesh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* U3DPhysxMesh::descriptor() {
  ::protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const U3DPhysxMesh& U3DPhysxMesh::default_instance() {
  ::protobuf_Scene_2eproto::InitDefaultsU3DPhysxMesh();
  return *internal_default_instance();
}

U3DPhysxMesh* U3DPhysxMesh::New(::google::protobuf::Arena* arena) const {
  U3DPhysxMesh* n = new U3DPhysxMesh;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void U3DPhysxMesh::Clear() {
// @@protoc_insertion_point(message_clear_start:killer.proto.U3DPhysxMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  indices_.Clear();
  uvs_.Clear();
  triangles_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(rotation_ != NULL);
      rotation_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(pos_ != NULL);
      pos_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(scale_ != NULL);
      scale_->Clear();
    }
  }
  if (cached_has_bits & 248u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixrotation_) -
        reinterpret_cast<char*>(&id_)) + sizeof(fixrotation_));
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool U3DPhysxMesh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:killer.proto.U3DPhysxMesh)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.ColliderType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::killer::proto::ColliderType_IsValid(value)) {
            set_type(static_cast< ::killer::proto::ColliderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 vertex_count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_vertex_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vertex_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.Vector3 vertices = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_vertices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector4 rotation = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_rotation()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 pos = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .killer.proto.Vector3 scale = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_scale()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 indices_count = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_indices_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &indices_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 indices = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 72u, input, this->mutable_indices())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_indices())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fixRotation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u /* 80 & 0xFF */)) {
          set_has_fixrotation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fixrotation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .killer.proto.Vector2 uvs = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_uvs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 triangles = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u /* 96 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 96u, input, this->mutable_triangles())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_triangles())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:killer.proto.U3DPhysxMesh)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:killer.proto.U3DPhysxMesh)
  return false;
#undef DO_
}

void U3DPhysxMesh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:killer.proto.U3DPhysxMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional int32 vertex_count = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vertex_count(), output);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vertices(static_cast<int>(i)), output);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->rotation_, output);
  }

  // optional .killer.proto.Vector3 pos = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->pos_, output);
  }

  // optional .killer.proto.Vector3 scale = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->scale_, output);
  }

  // optional int32 indices_count = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->indices_count(), output);
  }

  // repeated int32 indices = 9;
  for (int i = 0, n = this->indices_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      9, this->indices(i), output);
  }

  // optional bool fixRotation = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fixrotation(), output);
  }

  // repeated .killer.proto.Vector2 uvs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uvs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->uvs(static_cast<int>(i)), output);
  }

  // repeated int32 triangles = 12;
  for (int i = 0, n = this->triangles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      12, this->triangles(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:killer.proto.U3DPhysxMesh)
}

::google::protobuf::uint8* U3DPhysxMesh::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:killer.proto.U3DPhysxMesh)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional .killer.proto.ColliderType type = 2;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional int32 vertex_count = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vertex_count(), target);
  }

  // repeated .killer.proto.Vector3 vertices = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->vertices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->vertices(static_cast<int>(i)), deterministic, target);
  }

  // optional .killer.proto.Vector4 rotation = 5;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, *this->rotation_, deterministic, target);
  }

  // optional .killer.proto.Vector3 pos = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, *this->pos_, deterministic, target);
  }

  // optional .killer.proto.Vector3 scale = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, *this->scale_, deterministic, target);
  }

  // optional int32 indices_count = 8;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->indices_count(), target);
  }

  // repeated int32 indices = 9;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(9, this->indices_, target);

  // optional bool fixRotation = 10;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->fixrotation(), target);
  }

  // repeated .killer.proto.Vector2 uvs = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->uvs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->uvs(static_cast<int>(i)), deterministic, target);
  }

  // repeated int32 triangles = 12;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(12, this->triangles_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:killer.proto.U3DPhysxMesh)
  return target;
}

size_t U3DPhysxMesh::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:killer.proto.U3DPhysxMesh)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .killer.proto.Vector3 vertices = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->vertices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->vertices(static_cast<int>(i)));
    }
  }

  // repeated int32 indices = 9;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->indices_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->indices_size());
    total_size += data_size;
  }

  // repeated .killer.proto.Vector2 uvs = 11;
  {
    unsigned int count = static_cast<unsigned int>(this->uvs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->uvs(static_cast<int>(i)));
    }
  }

  // repeated int32 triangles = 12;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->triangles_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->triangles_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .killer.proto.Vector4 rotation = 5;
    if (has_rotation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->rotation_);
    }

    // optional .killer.proto.Vector3 pos = 6;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->pos_);
    }

    // optional .killer.proto.Vector3 scale = 7;
    if (has_scale()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *this->scale_);
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 vertex_count = 3;
    if (has_vertex_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vertex_count());
    }

    // optional int32 indices_count = 8;
    if (has_indices_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->indices_count());
    }

    // optional bool fixRotation = 10;
    if (has_fixrotation()) {
      total_size += 1 + 1;
    }

    // optional .killer.proto.ColliderType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void U3DPhysxMesh::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:killer.proto.U3DPhysxMesh)
  GOOGLE_DCHECK_NE(&from, this);
  const U3DPhysxMesh* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const U3DPhysxMesh>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:killer.proto.U3DPhysxMesh)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:killer.proto.U3DPhysxMesh)
    MergeFrom(*source);
  }
}

void U3DPhysxMesh::MergeFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:killer.proto.U3DPhysxMesh)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  indices_.MergeFrom(from.indices_);
  uvs_.MergeFrom(from.uvs_);
  triangles_.MergeFrom(from.triangles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_rotation()->::killer::proto::Vector4::MergeFrom(from.rotation());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pos()->::killer::proto::Vector3::MergeFrom(from.pos());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_scale()->::killer::proto::Vector3::MergeFrom(from.scale());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      vertex_count_ = from.vertex_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      indices_count_ = from.indices_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      fixrotation_ = from.fixrotation_;
    }
    if (cached_has_bits & 0x00000080u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void U3DPhysxMesh::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void U3DPhysxMesh::CopyFrom(const U3DPhysxMesh& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:killer.proto.U3DPhysxMesh)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool U3DPhysxMesh::IsInitialized() const {
  return true;
}

void U3DPhysxMesh::Swap(U3DPhysxMesh* other) {
  if (other == this) return;
  InternalSwap(other);
}
void U3DPhysxMesh::InternalSwap(U3DPhysxMesh* other) {
  using std::swap;
  vertices_.InternalSwap(&other->vertices_);
  indices_.InternalSwap(&other->indices_);
  uvs_.InternalSwap(&other->uvs_);
  triangles_.InternalSwap(&other->triangles_);
  swap(rotation_, other->rotation_);
  swap(pos_, other->pos_);
  swap(scale_, other->scale_);
  swap(id_, other->id_);
  swap(vertex_count_, other->vertex_count_);
  swap(indices_count_, other->indices_count_);
  swap(fixrotation_, other->fixrotation_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata U3DPhysxMesh::GetMetadata() const {
  protobuf_Scene_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Scene_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace killer

// @@protoc_insertion_point(global_scope)
